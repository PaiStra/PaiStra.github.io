<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于filter的基本流程配置</title>
    <link href="/2024/05/30/%E5%85%B3%E4%BA%8Efilter%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/05/30/%E5%85%B3%E4%BA%8Efilter%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>概述：本篇记录了配置过滤器的基本流程</p></blockquote><h2 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br></code></pre></td></tr></table></figure><p>使用注解来配置过滤器  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpFilter</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>继承HttpFilter  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse res, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <br>    &#125;<br></code></pre></td></tr></table></figure><p>重写doFilter方法来使用过滤器  </p><h2 id="解决编码乱码问题"><a href="#解决编码乱码问题" class="headerlink" title="解决编码乱码问题"></a>解决编码乱码问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>res.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure><p>通过设置编码格式来解决传输过程中的乱码问题  </p><h2 id="配置过滤地址"><a href="#配置过滤地址" class="headerlink" title="配置过滤地址"></a>配置过滤地址</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> req.getRequestURL().toString();<br></code></pre></td></tr></table></figure><p>获取url  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(!url.endsWith(<span class="hljs-string">&quot;login&quot;</span>) &amp;&amp; !url.endsWith(<span class="hljs-string">&quot;index.jsp&quot;</span>) &amp;&amp; !url.endsWith(<span class="hljs-string">&quot;/&quot;</span>))&#123;<br>            <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (String)session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>            <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>                req.setAttribute(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;您尚未登录，请登录&quot;</span>);<br>                req.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(req,res);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>通过判断url或者uri中包含的地址要素来决定是否过滤 </p><p>过滤器获取的attribute应该要在<strong>会话域</strong>才行  </p><p>所以在loginservlet中判断的时候需要把属性配置在会话域  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于使用servlet和jsp配置javaweb的一些体会</title>
    <link href="/2024/05/29/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8servlet%E5%92%8Cjsp%E9%85%8D%E7%BD%AEjavaweb%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%93%E4%BC%9A/"/>
    <url>/2024/05/29/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8servlet%E5%92%8Cjsp%E9%85%8D%E7%BD%AEjavaweb%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%93%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<blockquote><p>概述：本篇介绍了在使用时候遇到的一些问题和细节</p></blockquote><h2 id="统筹规划"><a href="#统筹规划" class="headerlink" title="统筹规划"></a>统筹规划</h2><p>应该先分析系统中需要用到的功能  </p><p>如果给出了web前端页面，应该根据前端给出的逻辑给予实现  </p><ol><li>先分析数据库职能，把实体类创建好</li><li>再分析系统功能要素，把功能和实体类之间建立联系，然后写出基本的dao层代码，<strong>先写主要的，可以不全写完</strong></li><li>分析前端页面，根据前端页面，先创建好对应的servlet</li><li>根据servlet来写要实现的功能，每个功能属于业务逻辑层，也就是service层，service层中再调用dao层的基础性代码来综合实现业务</li></ol><h2 id="测试的重要性"><a href="#测试的重要性" class="headerlink" title="测试的重要性"></a>测试的重要性</h2><p>假设给业务开发分流程，其实可以分为先开发数据库，再开发前端，然后开发后端  </p><p>那么必须要完成一个大模块或者小模块后及时进行测试，以免后续模块间的耦合度增高后debug难度增大  </p><p>比方说dao层写完后，一定要进行一下测试，这样可以避免很多的麻烦和焦虑</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>以太网标准</title>
    <link href="/2024/05/28/%E4%BB%A5%E5%A4%AA%E7%BD%91%E6%A0%87%E5%87%86/"/>
    <url>/2024/05/28/%E4%BB%A5%E5%A4%AA%E7%BD%91%E6%A0%87%E5%87%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>概述：本篇详解了各类以太网标准</p></blockquote><h2 id="以太网标准体系"><a href="#以太网标准体系" class="headerlink" title="以太网标准体系"></a>以太网标准体系</h2><p>截止到现在IEEE802.3工作组总共定义了标准以太网、快速以太网、千兆以太网、万兆以太网、新型以太网五大以太网标准体系。这些标准最明显的区别就是速率不同。 </p><ul><li>IEEE802.3标准为采用不同传输介质的标准以太网制定对应标准，主要包括采用细同轴电缆的10BASE-2、采用粗同轴电缆的10BASE-5和采用双绞线的10BASE-T；</li><li>IEEE802.3u标准为采用不同传输介质的快速以太网制定相应规范，包括采用双绞线介质的100BASE-Tx和100BASE-T4，采用多模光纤介质的100BASE-Fx以及10&#x2F;100M速率自协商功能；</li><li>IEEE802.3z和IEEE802.3ab标准定义了采用光纤为传输介质的1000BASE-SX&#x2F;LX以及采用双绞线介质的1000BASE-T规范；</li><li>IEEE802.3ae标准定义了万兆以太网的特点：光纤传输、全双工模式，不再使用半双工和CSMA&#x2F;CD介质访问控制技术，采用局域网和广域网两种物理模型，将以太网技术引入到广域网中；</li><li>IEEE802.3ba标准同时包含40Gbps与100Gbps两种速率接口。该标准解决了数据中心、运营商网络和其他流量密集的高性能计算环境，以及日益增长的应用对带宽的需求。</li></ul><p>以太网实现了网络上无线电系统多个节点发送信息的想法，每个节点必须获取电缆或者信道的才能传送信息，有时也叫作以太（Ether）（这个名字来源于19世纪的物理学家假设的电磁辐射媒体-光以太。后来的研究证明光以太不存在）。 每一个节点有全球唯一的48位地址也就是制造商分配给网卡的MAC地址，以保证以太网上所有节点能互相鉴别。由于以太网十分普遍，许多制造商把以太网卡直接集成进计算机主板。  </p><p>以太网上的计算机任何时候都可以发送信息，但发送之前都需先检测网络是否空闲，即“<strong>侦听”</strong>，如果某时刻有两个或者更多的分组发生冲突，则检测到冲突，欲发送数据的计算机就都需等待一段时间，即“<strong>回退</strong>”，各个计算机的回退时间<strong>随机</strong>产生，一般情况下都不相同。回退时间过后各计算机再次试图发送。这就是以太网技术必须提到的 <strong>CSMA</strong>&#x2F;CD（载波侦听多路访问&#x2F;冲突检测）机制。</p><h4 id="标准名字构成"><a href="#标准名字构成" class="headerlink" title="标准名字构成"></a>标准名字构成</h4><ul><li><strong>10&#x2F;100&#x2F;1000</strong>：表示网线设计的频率，单位MHz。值越大，网线所支持的速度就越快。100 MHz表示以每秒100Mbit的速度传输，这在理论上指的就是12.5 MB&#x2F;s。当然，实际应用中考虑到冗余设计和干扰等因素，真实值可能会小很多。</li><li><strong>BASE</strong>：BASE是英文BASEband的缩写，指的就是基带。表示没有使用频分复用或者其它频率转换技术，每一个信号在一个单一频率上完全控制线缆</li><li><strong>数字&#x2F;T&#x2F;F&#x2F;C等</strong>：最后一个如果是数字，则表示单段网线的最大长度（基准单位是100m）；如果是字母，则依次解释如下：T代表承载信号的物理介质是双绞线缆（Twisted Pair Cable，又分为UTP（Unshielded Twisted Pair，非屏蔽双绞线）和STP（Shielded Twicted Pair，屏蔽双绞线）两种），在这里每一对传送信号的双绞线互相缠绕以减少电磁干扰和串扰；F表示光纤；</li><li><strong>最后的字母或数字（4&#x2F;X等）</strong>： 在同一种传送速率下有多种不同的标准，它们之间以一个字母或数字跟随T&#x2F;F&#x2F;C之后的方式来区隔（例如TX）。它显示了网线的结构并指出包含的绞线对的数量。某些高速标准使用同轴电缆，则分配代号为CX。</li></ul><h2 id="原始以太网：1Mbps以太网"><a href="#原始以太网：1Mbps以太网" class="headerlink" title="原始以太网：1Mbps以太网"></a>原始以太网：1Mbps以太网</h2><ul><li><strong>1BASE5</strong>：也称为星型局域网，速率是1Mbit&#x2F;s。在商业上很失败，但同时也是双绞线的第一次使用；</li></ul><h2 id="标准以太网：10Mbps以太网"><a href="#标准以太网：10Mbps以太网" class="headerlink" title="标准以太网：10Mbps以太网"></a>标准以太网：10Mbps以太网</h2><p>最开始以太网只有10Mbps的吞吐量，它所使用的是CSMA&#x2F;CD（带有冲突检测的载波侦听多路访问）的访问控制方法，通常把这种最早期的10Mbps以太网称之为标准以太网。以太网主要有两种传输介质，那就是双绞线和同轴电缆。所有的以太网都遵循IEEE 802.3标准。</p><h3 id="10BASE-5"><a href="#10BASE-5" class="headerlink" title="10BASE-5"></a>10BASE-5</h3><ul><li>10BASE-5解释：10指的是其10Mbit&#x2F;s的传输速度，BASE是基带信号的缩写（与宽带相反），5代表最大段长度为500米（1600英尺）；</li><li>10BASE-5也被称为Thick Ethernet or Thicknet，是以太网的第一个商用变体；</li><li>使用直径10mm的50欧姆粗同轴电缆（Coaxial Cable），总线拓扑结构，站点网卡的接口为DB-15连接器，每个网段允许有100个站点，每个网段最大允许距离为500m，网络直径为2500m，可由5个500m长的网段和4个中继器组成；</li><li>利用基带的10M传输速率，采用曼彻斯特编码传输数据；</li><li>现在这一标准实际上被10BASE2取代；</li></ul><h3 id="10BASE-2"><a href="#10BASE-2" class="headerlink" title="10BASE-2"></a>10BASE-2</h3><ul><li>10BASE-2解释：10表示10 Mbit&#x2F;s的传输速度，BASE代表基带信令，2代表最大段长度接近200米（实际最大长度为185米）；</li><li>10BASE-2也被称为Cheapernet，Thin Ethernet，Thinnet或者Thinwire，是为了降低10BASE-5的安装成本和复杂性而设计的，使用以BNC连接器端接的同轴电缆；</li><li>其使用廉价的R9-58型50欧姆细同轴电缆，总线拓扑结构；每个网段允许30个站点，每个网段最大允许距离为185m，仍保持10BASE-5的4中继器&#x2F;5网段设计能力，允许的最大网络直径为5x185&#x3D;925m。</li><li>利用基带的10M传输速率，采用曼彻斯特编码传输数据；</li><li>10BASE-2虽然在能力、规格上不及10BASE5，但是因为其线材较细、布线方便、成本也便宜，所以得到更广泛的使用，淘汰了10BASE5。由于双绞线的普及，它也被各式的双绞线网络取代；</li></ul><h3 id="10BASE-T"><a href="#10BASE-T" class="headerlink" title="10BASE-T"></a>10BASE-T</h3><ul><li>10BASE- T解释：10表示10Mbit&#x2F;s的传输速度，BASE表示使用基带传输，T表示双绞线（Twisted pair cables），每个信号的一对导线绞合在一起以减少对之间的电磁干扰和串扰；</li><li>对于相同传输速度有几种标准的情况下，它们通过T之后的字母或数字来区分，例如TX，指的是编码方法和通道数量。</li><li>使用两对非屏蔽双绞线，一对线发送数据，另一对线接收数据，用RJ-45模块作为端接器，星形拓扑结构，信号频率为20MHz，最大距离为100m；</li><li>双绞线以太网是以太网技术的主要进步之一，此前的以太网都是使用同轴电缆，自此以后，双绞线正式取代同轴电缆走上了历史舞台。10BASE-T因为价格便宜、配置灵活和易于管理而流行起来，现在占整个以太网销售量的90%以上。</li></ul><h3 id="10BASE-F"><a href="#10BASE-F" class="headerlink" title="10BASE-F"></a>10BASE-F</h3><ul><li>10BASE- T解释：10表示10Mbit&#x2F;s的传输速度，BASE表示使用基带传输，F表示光纤，使用双工光缆，一条光缆用于发送数据，另一条用于接收；</li><li>分为FP、FB 、FL三种链接类型，FP使用无源集线器连接，传输距离500米。FB使用有源连接器，传输距离2000米。FL可以使用多个中继器，可以进一步延长器传输距离；</li></ul><h4 id="10BASE-FP"><a href="#10BASE-FP" class="headerlink" title="10BASE-FP"></a>10BASE-FP</h4><ul><li>P为Passive的缩写，用来说明点对点的连接方式，一个网段的长度可达500m；</li><li>一个光缆无源星形耦合器最多可连接33台计算机。这形成了一个以信号耦合器为中心的星型网络；</li><li>没有已知的设备实现了这个标准；</li></ul><h4 id="10BASE-FB"><a href="#10BASE-FB" class="headerlink" title="10BASE-FB"></a>10BASE-FB</h4><ul><li>B为Backbone的缩写，是用来说明一个同步信令骨干网段，用于在一个跨越远距离的转发主干网系统中将专用的10BASE-FB同步信令中继器连接在一起。单个10BASE-FB网段最长可达2000m；</li><li>它不用于连接用户工作站。而是用于提供一个同步的信令骨干网，该网允许附加网段和中继器连接到网络上；</li></ul><h4 id="10BASE-FL"><a href="#10BASE-FL" class="headerlink" title="10BASE-FL"></a>10BASE-FL</h4><ul><li>L是Link的缩写，10BASE-FL是以太网光纤上最常用的10BASE-F规范；</li><li>10BASE-FL是路由器之间用光纤连接构成的以太网。最初在DIX规范中称为 FOIRL ，但由 IEE标准化后称为10BASE-FL。支持可达4km的光缆主干以10Mbit&#x2F;s的速度传输；</li><li>如今，10BASE-FL很少用于网络，并已被快速以太网，千兆以太网和100千兆位以太网标准所取代；</li></ul><h2 id="快速以太网：100Mbps以太网"><a href="#快速以太网：100Mbps以太网" class="headerlink" title="快速以太网：100Mbps以太网"></a>快速以太网：100Mbps以太网</h2><p>100Mbps以太网就是业内常说的快速以太网，它由 IEEE 802.3u 标准定义，基本与标准以太网相同，但速度比标准以太网快十倍。快速以太网的速度是通过提高时钟频率和使用不同的编码方式获得的。其传输方案最常用的便是100BASE-T，100BASE-T又包括100BASE-TX 、100BASE-T4以及其他几种。100BASE-T4 是一种 3 类双绞线方案，不支持全双工，目前最广泛使用的都是100BASE-TX，此方案需使用 5 类以上双绞线，时钟信号处理速率高达125MHz。</p><h3 id="100BASE-T"><a href="#100BASE-T" class="headerlink" title="100BASE-T"></a>100BASE-T</h3><ul><li>又称Fast Ethernet（快速以太网），是许多以标称速率100 Mbit&#x2F;s传输流量的以太网标准的统称。在快速以太网标准中，100BASE-TX是最常见的。</li><li>名称中的“100”是指100Mbit&#x2F;s的传输速度，“BASE”是指基带信令，破折号后面的字母T是指承载信号的物理介质为双绞线。快速以太网有时被称为100BASE-X，其中“X”是FX和TX变体的占位符；</li></ul><h4 id="100BASE-T4"><a href="#100BASE-T4" class="headerlink" title="100BASE-T4"></a>100BASE-T4</h4><ul><li>100BASE-T4是快速以太网的早期实现。使用的是四对双绞线，一对保留用于发送，一个用于接收，其余两个将通过协商切换方向；</li><li>使用RJ-45连接器，最大网段长度为100m，并且在节点间的最小长度是2.5米；</li><li>采用EIA568布线标准。由于没有专用的发送或接收线路，所以100BASE-T4不能进行全双工操作；</li><li>在传输中采用8B&#x2F;6T的编码方式，即每8位作为一组的数据转换为每6位一组的三元码组，每条输出信道的信息传输率为33.3Mbps*6&#x2F;8&#x3D;25Mbaud；</li><li>100BASE-T4未被广泛采用，但为其开发的技术被用于1000BASE-T；</li></ul><h4 id="100BASE-TX"><a href="#100BASE-TX" class="headerlink" title="100BASE-TX"></a>100BASE-TX</h4><ul><li>使用两对5类非屏蔽双绞线或1类屏蔽双绞线，一对用于发送数据，另一对用于接收数据；</li><li>最大网段长度为100m，布线符合EIA568标准；</li><li>采用的是4B&#x2F;5B编码方式，即把每4位数据用5位的编码组来表示，该编码方式的码元利用率&#x3D;4&#x2F;5*100%&#x3D;80%。然后将4B&#x2F;5B编码成NRZI进行传输，使其可以125MHz的串行数据流来传送数据；</li><li>100BASE-TX采用的物理拓扑结构为星型，在目前的组网方法中，使用最多的是- 100BASE-TX标准的网卡，只支持RJ-45标准，它多用于主干网；</li><li>支持全双工，使用MLT-3（多电平传输-3）波形法来降低信号频率到125&#x2F;3&#x3D;41.6MHz；</li><li>100BASE-TX是100BASE-T中使用最为广泛的物理层规范；</li></ul><h4 id="100BASE-T2"><a href="#100BASE-T2" class="headerlink" title="100BASE-T2"></a>100BASE-T2</h4><ul><li>随着数字信号处理技术和集成电路技术的发展，只用2对3类UTP线就可以传送100Mbps的数据，因而针对100BASE-T4不能实现全双工的缺点，IEEE开始制定100BASE-T2标准；</li><li>100BASE-T2 采用2对音频或数据级3、4或5类UTP电缆，一对用于发送数据，另一对用于接收数据，可实现全双工操作；采用RJ45连接器，最长网段为100m，符合EIA568布线标准；</li><li>采用名为PAM5x5的5电平编码方案；</li></ul><h4 id="100BASE-T1"><a href="#100BASE-T1" class="headerlink" title="100BASE-T1"></a>100BASE-T1</h4><ul><li>100BASE-T1是IEEE专门针对100Mb&#x2F;s汽车以太网的规范，也可以将其称为IEEE802.3bw，这两个名称指的是相同的规范。“-T1”后缀是一个重要的区别，让您知道是指汽车以太网，它与普通100BASE-T不同；</li><li>100BASE-T1规范可与OPEN Alliance BroadR-Reach互操作，它们几乎相同（名称通常可互换使用），但有两个的小的差异，第一在物理层电气（物理介质附件PMA）测试规范中，100BASE-T1规范定义了发送端最大峰值差分输出的测试，BroadR-Reach规范中未明确定义此参数。第二个差异是100BASE-T1规范在唤醒命令的协议时序上存在一些差异，以使这些时段更短；</li><li>它仅支持全双工，同时在两个方向上传输；</li><li>双绞线电缆需要支持66 MHz，最大长度为15米；</li><li>没有定义特定的连接器；</li></ul><h3 id="100BASE-X"><a href="#100BASE-X" class="headerlink" title="100BASE-X"></a>100BASE-X</h3><ul><li>最新的IEEE Std 802.3™-2015的SECTION 2 的Clause 24 规定了一系列100 Mb&#x2F;s物理层实现共同使用的物理编码子层（PCS）和物理媒体附加（PMA）子层，统称为100BASE-X；</li><li>目前在这个系列中有两个实施例：100BASE-TX和100BASE-FX。100BASE-TX指定通过两对双绞线5类电缆进行操作，100BASE-FX指定通过两根光纤进行操作；</li></ul><h3 id="100BASE-FX"><a href="#100BASE-FX" class="headerlink" title="100BASE-FX"></a>100BASE-FX</h3><ul><li>100BASE-FX是光纤上的快速以太网版本。使用两股光纤，一股用于发送数据，另一股用于接收数据。可用单模光纤或者多模光纤。在全双工情况下，单模光纤的最大传输距离是40千米，多模光纤的最大传输距离是2千米；</li><li>100BASE-FX使用与100BASE-TX相同的4B5B编码和NRZI线路代码；</li><li>100BASE-FX运行于光缆上，使得它非常适合于高速主干网和长距离传输、或有强电气干扰的环境、或要求较高安全保密链接的环境；</li></ul><h2 id="千兆以太网：1Gbps以太网"><a href="#千兆以太网：1Gbps以太网" class="headerlink" title="千兆以太网：1Gbps以太网"></a>千兆以太网：1Gbps以太网</h2><p>千兆以太网标准IEEE 802.3ｚ于1998年6月获得批准，它为三种传输媒质定义了三种收发器：1000BASE-LX用于安装单模光纤，1000BASE-SX用于安装多模光纤，1000BASE-CX用于平衡、屏蔽铜缆，可以用于机房内设备的互连。IEEE 802.3ab定义了在5类线的基础上运行千兆以太网1000BASE-T的物理层，并在1999年6月得到批准。</p><h3 id="1000BASE-X"><a href="#1000BASE-X" class="headerlink" title="1000BASE-X"></a>1000BASE-X</h3><ul><li>IEEE802.3z定义了基于光纤和短距离铜缆的1000BASE-X；</li><li>采用8B&#x2F;10B编码技术，信道传输速度为1.25Gbit&#x2F;s，去耦后实现1000Mbit&#x2F;s传输速度；</li></ul><h3 id="1000BASE-CX"><a href="#1000BASE-CX" class="headerlink" title="1000BASE-CX"></a>1000BASE-CX</h3><ul><li>采用的是150Ω平衡屏蔽双绞线（STP），使用9芯D型连接器连接电缆；</li><li>采用8B&#x2F;10B编码方式，最大传输距离25米；</li><li>适用于交换机之间的连接，尤其适用于主干交换机和主服务器之间的短距离连接；</li></ul><h3 id="1000BASE-LX"><a href="#1000BASE-LX" class="headerlink" title="1000BASE-LX"></a>1000BASE-LX</h3><ul><li>1000BASE-LX采用单模或多模长波激光器（long wavelength laser）的规格。</li><li>采用直径为9um或10um的单模光纤，工作波长范围为1270-1355nm，传输距离为5km左右。</li><li>采用直径为62.5um或50um的多模光纤时，工作波长范围为1270-1355nm，传输距离为550m；</li></ul><h3 id="1000BASE-SX"><a href="#1000BASE-SX" class="headerlink" title="1000BASE-SX"></a>1000BASE-SX</h3><ul><li>1000BASE-X 采用多模短波激光器（short wave-length laser）的规格；</li><li>只支持多模光纤，可以采用直径为62.5um或50um的多模光纤，工作波长为770-860nm，传输距离为220-550m；</li></ul><h3 id="1000BASE-T"><a href="#1000BASE-T" class="headerlink" title="1000BASE-T"></a>1000BASE-T</h3><ul><li>采用四对五类平衡电缆的1000 Mb&#x2F;s物理层规格。与10BASE-T、100BASE-T完全兼容；</li><li>千兆以太网可以在下列四种媒质上运行：单模光纤，最大连接距离至少可达5公里；多模光纤，最大连接距离至少550米；同轴电缆，最大连接距离至少25米；超五类&#x2F;六类线，最大连接距离为100米；</li></ul><h2 id="万兆以太网：10Gbps以太网"><a href="#万兆以太网：10Gbps以太网" class="headerlink" title="万兆以太网：10Gbps以太网"></a>万兆以太网：10Gbps以太网</h2><p>10G以太网于2002年7月在IEEE通过。10G以太网包括10GBASE-X、10GBASE-R和10GBASE-W。</p><ul><li>10GBASE-X使用一种特紧凑包装，含有1个较简单的WDM器件、4个接收器和4个在1300nm波长附近以大约25nm为间隔工作的激光器，每一对发送器&#x2F;接收器在3.125Gbit&#x2F;s速度（数据流速度为2.5Gbit&#x2F;s）下工作；</li><li>10GBASE-R是一种使用64B&#x2F;66B编码（不是在千兆以太网中所用的8B&#x2F;10B）的串行接口，数据流为10.000Gbit&#x2F;s，因而产生的时钟速率为10.3Gbit&#x2F;s；</li><li>10GBASE-W是广域网接口，与SONET OC-192兼容，其时钟为9.953Gbit&#x2F;s数据流为9.585Gbit&#x2F;s；</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>交换机工作原理及MAC表</title>
    <link href="/2024/05/28/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8AMAC%E8%A1%A8/"/>
    <url>/2024/05/28/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8AMAC%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>概述：本篇讲述交换机工作原理</p></blockquote><h2 id="交换机工作原理"><a href="#交换机工作原理" class="headerlink" title="交换机工作原理"></a>交换机工作原理</h2><p>交换机工作在OSI模型的第二层，数据链路层，用于终端用户接入网络，对数据帧进行交换  </p><h2 id="交换机对数据帧交换的过程"><a href="#交换机对数据帧交换的过程" class="headerlink" title="交换机对数据帧交换的过程"></a>交换机对数据帧交换的过程</h2><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>交换机在进行数据转发时，对发送端的MAC地址和端口进行记录，这个过程叫做学习  </p><p>如图所示：PC1 想要传输数据帧到 PC2，交换机从 E0&#x2F;0&#x2F;1 口接收到数据帧，查看其源MAC地址并将与其对应的E0&#x2F;0&#x2F;1口记录进MAC地址表。  </p><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/image-20240528090212976.png" alt="image-20240528090212976">  </p><h3 id="泛洪"><a href="#泛洪" class="headerlink" title="泛洪"></a>泛洪</h3><p>交换机收到需要转发的数据帧，但是MAC地址表中无目标端的MAC地址条目，则会将此数据帧发送给所有端口（除源端口）  </p><p>泛洪前提：  </p><ol><li>当交换机收到一个广播帧或未知的单播帧会泛洪；</li><li>接口所处统一WANS;</li><li>接口是up状态；</li><li>除去自身接收端口</li></ol><p>如图所示：交换机路由表内并无 PC2 的路由条目，此时交换机会从PC1 收到的数据帧转发给端口E2、E3、E4。 </p><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/image-20240528090600762.png" alt="image-20240528090600762">  </p><p>由于PC1 ping PC2 PC2会向 PC1 回报 所以交换机 MAC地址表会获得 PC2 的MAC地址  </p><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/image-20240528090629934.png" alt="image-20240528090629934">  </p><h3 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h3><p>交换机需转发的数据帧目的地址是已知的（MAC地址表中存在了的），会将数据帧发送给对应目的地址的端口  </p><p>如图所示：当交换机MAC地址表中存在 PC2 的MAC表项时，会直接将数据帧直接转发给特定端口E2。  </p><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/image-20240528090805824.png" alt="image-20240528090805824">  </p><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>当进行转发时候，除特定端口外的其他端口不转发  </p><p>如图所示：交换机对端口E3、E4没有进行转发，是因为进行了过滤。 </p><h3 id="老化"><a href="#老化" class="headerlink" title="老化"></a>老化</h3><p>当交换机学习到某个源MAC地址时会给这个条目一个时间戳（类似于有效时间，可自行设置，默认五分钟），每当收到此MAC地址发送的数据时，时间戳会被更新，如超过时间仍未收到词MAC地址的数据帧，交换机则会将此条MAC条目移除  </p><h2 id="MAC表的解读"><a href="#MAC表的解读" class="headerlink" title="MAC表的解读"></a>MAC表的解读</h2><p>MAC地址表主要记录着连接设备的MAC地址与交换机端口的映射关系，在进行数据转发时进行查询。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">display mac-address<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/image-20240528091306504.png" alt="image-20240528091306504">  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络 信道复用技术</title>
    <link href="/2024/05/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%BF%A1%E9%81%93%E5%A4%8D%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    <url>/2024/05/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%BF%A1%E9%81%93%E5%A4%8D%E7%94%A8%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<blockquote><p>概览：本篇讲述了信道复用技术（频分，时分，波分，码分）</p></blockquote><h2 id="复用和多址的区别"><a href="#复用和多址的区别" class="headerlink" title="复用和多址的区别"></a>复用和多址的区别</h2><p>复用针对资源（传输），多址针对用户（接入）   </p><p><strong>复用</strong>，将一个物理<a href="https://so.csdn.net/so/search?q=%E4%BF%A1%E9%81%93&spm=1001.2101.3001.7020">信道</a>根据时间、频率、空间等资源划分为多个虚拟信道。  </p><p>一、减少管道的个数，为运营商减少线路成本；  </p><p>二、提升单通道的容量  </p><p><strong>多址</strong>，“在同一个基站下，不同的用户利用相同的资源（同一时间，同一频率）发出通信请求肯定会发生冲突”，多址用来解决这个问题，如何划分资源块，使更多的用户终端能够在不发生冲突的情况下获得服务  </p><p><strong>举例</strong>，将10MHz的频率资源，划分成5个2MHz，作为子信道，这种做法，叫复用。5个的用户使用这些子信道，每个子信道变成了用户的“址”，这叫多址。  </p><h2 id="频分复用（FDM）-FDMA频分多址"><a href="#频分复用（FDM）-FDMA频分多址" class="headerlink" title="频分复用（FDM）-FDMA频分多址"></a>频分复用（FDM）-FDMA频分多址</h2><p>目的在于提高频带利用率  </p><p>原因：在通信系统中，信道能提供的带宽比传送一路信号需要的带宽宽的多，所以一个信道只传输一路信号是非常浪费的  </p><p>原理：不同用户分别用不同频段跟同时基站通信，因为接收端可以放大特定频段的信号，也就是可以将其他信号剔除  </p><p>举例：在8：00时，A，B，C三人都要向外打电话，移动公司为了节省带宽，采用频分复用技术，讲A,B,C三人的信号频率，通过调制技术，调到不同的频段（要加上防护频带 ，以防止邻路信号间相互干扰),合并后的复用信号，原则上可以在信道中传输，但有时为了更好地利用信道的传输特性，还可以再进行一次调制。在接收端，可利用相应的带通滤波器(BPF)来区分开各路信号的频谱。然后，再通过各自的相干解调器便可恢复各路调制信号。在接收端，可利用相应的带通滤波器(BPF)来区分开各路信号的频谱。然后，再通过各自的相干解调器便可恢复各路调制信号。  </p><p>优缺点：频分复用系统的最大优点是信道复用率高，容许复用的路数多，分路也很方便。因此，它成为目前模拟通信中最主要的一种复用方式。特别是在有线和微波通信系统中应用十分广泛。频分复用系统的主要缺点是设备生产比较复杂，会因滤波器件特性不够理想和信道内存在非线性而产生路间干扰。  </p><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/image-20240528083112168.png" alt="image-20240528083112168"></p><h2 id="时分复用（TDM）"><a href="#时分复用（TDM）" class="headerlink" title="时分复用（TDM）"></a>时分复用（TDM）</h2><p>就是首先需要同步，大家公用一个时间基准，比如把每秒分为十份，每份0.1秒，这就是十个时隙，每个时隙只给一个用户使用，所以不同用户依次跟基站通信，也就没有了干扰。  </p><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/20200511215520923.png" alt="在这里插入图片描述">  </p><h2 id="码分复用（CDM）"><a href="#码分复用（CDM）" class="headerlink" title="码分复用（CDM）"></a>码分复用（CDM）</h2><p>就是不同用户在不同的编码方式下实现通信  </p><p> 实际上就是用户用密钥去接收自己的那一段数据，数据还是同一份数据，不同的密钥能解出不同的内容</p><p>码分多址例子：<img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/2020051220313312.png" alt="在这里插入图片描述">  </p><p>举例：</p><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/image-20240528083343858.png" alt="image-20240528083343858"></p><h2 id="波分复用（WDM）"><a href="#波分复用（WDM）" class="headerlink" title="波分复用（WDM）"></a>波分复用（WDM）</h2><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/image-20240528085429822.png" alt="image-20240528085429822">  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat报错</title>
    <link href="/2024/05/27/Tomcat%E6%8A%A5%E9%94%99/"/>
    <url>/2024/05/27/Tomcat%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<blockquote><p>概览：本篇将持续记录运行Tomcat时候遇到过的报错和解决方案</p></blockquote><h2 id="在-WebServlet-中的格式不对"><a href="#在-WebServlet-中的格式不对" class="headerlink" title="在@WebServlet()中的格式不对"></a>在@WebServlet()中的格式不对</h2><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/image-20240527145744978.png" alt="image-20240527145744978">  </p><p>如图报错，很有可能是因为缺少”&#x2F;“引起的  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用图床管理图片</title>
    <link href="/2024/05/27/%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BA%8A%E7%AE%A1%E7%90%86%E5%9B%BE%E7%89%87/"/>
    <url>/2024/05/27/%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BA%8A%E7%AE%A1%E7%90%86%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>概览：使用PicGo图床管理图片  </p></blockquote><h2 id="下载PicGo"><a href="#下载PicGo" class="headerlink" title="下载PicGo"></a>下载PicGo</h2><p>下载仓库地址：<a href="https://github.com/Molunerfinn/PicGo/releases">Releases · Molunerfinn&#x2F;PicGo (github.com)</a>  </p><p>选择下载链接：  </p><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/image-20240527103004364.png" alt="image-20240527103004364">    </p><h2 id="使用Github为图床仓库"><a href="#使用Github为图床仓库" class="headerlink" title="使用Github为图床仓库"></a>使用Github为图床仓库</h2><p>新建一个公开的github仓库  </p><p>在Setting-&gt;Developer settings-&gt;Personal access tokens里可以获取github的api  </p><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/image-20240527103433856.png" alt="image-20240527103433856">  </p><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/image-20240527103519864.png" alt="image-20240527103519864">   </p><h2 id="在PicGo里设置Github仓库"><a href="#在PicGo里设置Github仓库" class="headerlink" title="在PicGo里设置Github仓库"></a>在PicGo里设置Github仓库</h2><p>在图示位置新建图床仓库  </p><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/image-20240527104317476.png" alt="image-20240527104317476"></p><p>记得设为默认仓库  </p><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/image-20240527103724909.png" alt="image-20240527103724909">  </p><p>按图示填写即可，分支名就是github仓库的分支名，默认为main,老的为master  </p><h2 id="在Typora中启用插入图片时自动提交到图床"><a href="#在Typora中启用插入图片时自动提交到图床" class="headerlink" title="在Typora中启用插入图片时自动提交到图床"></a>在Typora中启用插入图片时自动提交到图床</h2><p>在偏好设置内如图设置即可，PicGo的路径精确到.exe  </p><p><img src="https://raw.githubusercontent.com/PaiStra/getPhoto/main/img/image-20240527104056107.png" alt="image-20240527104056107">  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2024/05/27/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/05/27/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>概览：2024年暑假从零开始的个人成长之旅</p></blockquote><h2 id="从今天开始的博客生活"><a href="#从今天开始的博客生活" class="headerlink" title="从今天开始的博客生活"></a>从今天开始的博客生活</h2><p>从今天开始养成记录博客的好习惯  </p><p>但是也要遵守markdown语法</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
